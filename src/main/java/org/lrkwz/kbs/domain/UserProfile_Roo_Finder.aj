// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.lrkwz.kbs.domain;

import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.lrkwz.kbs.domain.UserProfile;

privileged aspect UserProfile_Roo_Finder {
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByEmailAddress(String emailAddress) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery<UserProfile> q = em.createQuery("SELECT o FROM UserProfile AS o WHERE o.emailAddress = :emailAddress", UserProfile.class);
        q.setParameter("emailAddress", emailAddress);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesByEmailAddressAndPassword(String emailAddress, String password) {
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery<UserProfile> q = em.createQuery("SELECT o FROM UserProfile AS o WHERE o.emailAddress = :emailAddress AND o.password = :password", UserProfile.class);
        q.setParameter("emailAddress", emailAddress);
        q.setParameter("password", password);
        return q;
    }
    
    public static TypedQuery<UserProfile> UserProfile.findUserProfilesBySurnameAndName(String surname, String name) {
        if (surname == null || surname.length() == 0) throw new IllegalArgumentException("The surname argument is required");
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = UserProfile.entityManager();
        TypedQuery<UserProfile> q = em.createQuery("SELECT o FROM UserProfile AS o WHERE o.surname = :surname AND o.name = :name", UserProfile.class);
        q.setParameter("surname", surname);
        q.setParameter("name", name);
        return q;
    }
    
}
